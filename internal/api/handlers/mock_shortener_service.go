// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/handlers/urls.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/handlers/urls.go -destination=internal/api/handlers/mock_shortener_service.go -package=handlers ShortenerService
//

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	url "github.com/mauricioabreu/url-shortener/internal/services/url"
	gomock "go.uber.org/mock/gomock"
)

// MockShortenerService is a mock of ShortenerService interface.
type MockShortenerService struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerServiceMockRecorder
	isgomock struct{}
}

// MockShortenerServiceMockRecorder is the mock recorder for MockShortenerService.
type MockShortenerServiceMockRecorder struct {
	mock *MockShortenerService
}

// NewMockShortenerService creates a new mock instance.
func NewMockShortenerService(ctrl *gomock.Controller) *MockShortenerService {
	mock := &MockShortenerService{ctrl: ctrl}
	mock.recorder = &MockShortenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerService) EXPECT() *MockShortenerServiceMockRecorder {
	return m.recorder
}

// Shorten mocks base method.
func (m *MockShortenerService) Shorten(ctx context.Context, data *url.ShortenData) (*url.ShortenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", ctx, data)
	ret0, _ := ret[0].(*url.ShortenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShortenerServiceMockRecorder) Shorten(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShortenerService)(nil).Shorten), ctx, data)
}
